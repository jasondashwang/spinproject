# 1 "mixer_target.pml"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "mixer_target.pml"
typedef Wal {
  int value;
  bool locked;
}


Wal wallets[8];

typedef Trans {
  int curr;
  int total;
  bool locks[8];
  bool assigned;
  bool completed;
}

Trans transactions[5];

int dest_wal[5];



proctype Unlock(int t_num) {
  int i;

  for (i: 0..7) {
    do
    :: (transactions[t_num].locks[i] == 1) ->
      wallets[i].locked = 0;
      transactions[t_num].locks[i] = 0;
    :: else -> break;
    od;
  }
}


proctype Decider() {
  int i = 0;
  int neededWallets;

  do
  ::(transactions[i].assigned == 0) ->


    printf("Unassigned index: %d \n", i);
    printf("Transaction total: %d \n", transactions[i].total);

    neededWallets = transactions[i].total / 10;
    do
    :: ((transactions[i].total % 10) > 0) ->
      neededWallets++;
      break;
    :: else -> break;
    od;
    printf("Needed wallets: %d \n", neededWallets);

    int w = 0;
    do
    :: (neededWallets == 0) ->
      printf("Finished assigning index: %d \n", i);
      transactions[i].assigned = 1;
      break;
    :: else ->
      do
      ::(wallets[w].locked == 0) ->
        wallets[w].locked = 1;
        neededWallets--;
        transactions[i].locks[w] = 1;
        break;
      :: else ->
        if
        :: (w < 7) -> w++;
        :: (w >= 7) -> w = 0;
        fi;
      od;
    od;


      printf("curr: %d\n", transactions[i].curr);
      printf("total: %d\n", transactions[i].total);
      int lk = 0;
      do
      :: (lk < 7) ->
        printf("%d, ", transactions[i].locks[lk]);
        lk++;
      :: (lk >= 7) ->
        printf("%d\n", transactions[i].locks[lk]);
        break;
      od;
      printf("assigned: %d\n", transactions[i].assigned);
      printf("completed: %d\n", transactions[i].completed);

  :: else ->
      if
      :: (i < 4) -> i++;
      :: (i >= 4) -> i = 0;
      fi;
  od;

}


proctype Creator() {
    int i = 0;

    loop:
      do
      :: (transactions[i].completed == 1) ->
        int new_value = 0;
        select(new_value: 10..30);
        transactions[i].curr = new_value;
        transactions[i].total = transactions[i].curr;
        transactions[i].assigned = 0;
        transactions[i].completed = 0;
        break;
      :: else -> break;
      od;

      if
      :: (i < 4) -> i++;
      :: (i >= 4) -> i = 0;
      fi;

    goto loop;
}



init {
  int i;
  for (i: 0..7) {
    wallets[i].value = 10;
    wallets[i].locked = 0;
  }

  int j;
  int k;

  for (j: 0..4) {
    transactions[j].curr = 0;
    transactions[j].total = 0;

    for (k: 0..7) {
      transactions[j].locks[k] = 0;
    }

    transactions[j].assigned = 1;
    transactions[j].completed = 1;
  }
# 183 "mixer_target.pml"
  run Creator();
  run Decider();
}
